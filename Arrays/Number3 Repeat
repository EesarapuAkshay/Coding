//https://www.interviewbit.com/problems/n3-repeat-number/
int Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    //Soln is correct but we need optimal sol
     /*int n=A.size();
     unordered_map<int,int> m;
     for(int i=0;i<n;i++){
         m[A[i]]++;
     }
     int k=n/3;
     
     for(auto x:m){
         if(x.second>k){
             return x.first;
         }
     }
     return -1;
     */
     
    int elem1=A[0],c1=1;
    int c2=0,elem2=0;
    int n=A.size();
    for(int i=1;i<n;i++)
    {
        if(A[i]==elem1)
        {
            c1++;
        }
        else if(A[i]==elem2)
        {
            c2++;
        }
        else if(c1==0)
        {
            elem1=A[i];
            c1=1;
        }
        else if(c2==0)
        {
            elem2=A[i];
            c2=1;
        }
        else
        {
            c1--;
            c2--;
        }
    }
    c1=0,c2=0;
    for(int i=0;i<n;i++){
        if(elem1==A[i]){
            c1++;
        }
        else if(elem2==A[i]){
            c2++;
        }
    }
    if(c1>(n/3)){
        return elem1;
    }
    else if(c2>(n/3)){
        return elem2;
    }
    return -1;

}
