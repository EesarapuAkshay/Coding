//https://www.interviewbit.com/old/problems/0-1-knapsack/
int knapsack(vector<int> &A, vector<int> &B, int C,int n,vector<vector<int>> &dp){
    if(n==0 || C==0){
        return 0;
    }
   if(dp[n][C]!=-1){
        return dp[n][C];
    }
    if(B[n-1]<=C){
        return dp[n][C]=max(A[n-1]+knapsack(A,B,C-B[n-1],n-1,dp),knapsack(A,B,C,n-1,dp));
    }
    else{
       return dp[n][C]=knapsack(A,B,C,n-1,dp);
    }
}
int Solution::solve(vector<int> &A, vector<int> &B, int C) {
    int n=A.size();
    vector<vector<int>> dp(n+1,vector<int> (C+1,-1));
    return knapsack(A,B,C,n,dp);
}
